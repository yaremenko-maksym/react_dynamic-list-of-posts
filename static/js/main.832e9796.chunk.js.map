{"version":3,"sources":["components/Loader/Loader.tsx","api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","functions/emailValidator.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","getUsersPosts","a","fetch","response","ok","Error","status","text","json","getUserPostsByID","userId","getPostDetails","postId","PostsList","React","memo","user","selectedPostId","selectValue","handleOpenPostDetails","getPostFromServerByID","useState","posts","setPosts","isPostListLoading","setPostListLoading","getPostsFromServer","useCallback","allPosts","getPostsFromServerByID","id","userPosts","useEffect","map","post","title","type","onClick","getPostComments","deleteCommentFromServer","method","addComment","comment","body","JSON","stringify","headers","emailValidator","email","test","toLowerCase","NewCommentForm","getComments","inputName","setInputName","inputEmail","setInputEmail","inputComment","setInputComment","isEmailValid","setEmailValid","isSubmited","setSubmitted","isAddCommentLoading","setAddCommentLoading","handleSubmit","event","preventDefault","newComment","name","onSubmit","placeholder","value","onChange","target","classNames","onBlur","disabled","PostDetails","selectedPost","selectedPostComments","isCommentsVisible","setCommentsVisible","isDeleteCommentLoading","setDeleteCommentLoading","deleteTargets","setDeleteTargets","deleteComment","prevState","filter","targetId","length","includes","getUserByName","username","App","setUser","setSelectedPostId","setSelectValue","setSelectedPost","setSelectedPostComments","isPostLoading","setPostLoading","commentsPromise","currentPost","currentPostComments","getCommentsFromServer","getUserByNameFromServer","userArr","handeleSelectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.832e9796.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { Post } from '../types/Post';\nimport { BASE_URL } from './api';\n\nexport const getUsersPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const getUserPostsByID = async (userId: number): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text()}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUserPostsByID, getUsersPosts } from '../../api/posts';\n\ntype Props = {\n  selectedPostId: number;\n  user: User | null;\n  selectValue: string;\n  handleOpenPostDetails: (id: number) => void;\n  getPostFromServerByID: () => Promise<void>;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  user,\n  selectedPostId,\n  selectValue,\n  handleOpenPostDetails,\n  getPostFromServerByID,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPostListLoading, setPostListLoading] = useState(false);\n\n  const getPostsFromServer = useCallback(async () => {\n    try {\n      const allPosts = await getUsersPosts();\n\n      setPostListLoading(false);\n      setPosts(allPosts);\n    } catch (error) {\n      setPosts([]);\n    }\n  }, []);\n\n  const getPostsFromServerByID = useCallback(async () => {\n    try {\n      if (user !== null) {\n        const userPosts = await getUserPostsByID(user.id);\n\n        setPosts(userPosts);\n        setPostListLoading(false);\n      }\n    } catch (error) {\n      setPosts([]);\n      setPostListLoading(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    setPostListLoading(true);\n    if (selectValue === 'All users') {\n      getPostsFromServer();\n\n      return;\n    }\n\n    getPostsFromServerByID();\n    setPostListLoading(false);\n  }, [user]);\n\n  useEffect(() => {\n    getPostFromServerByID();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleOpenPostDetails(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n\n        {isPostListLoading && (\n          <Loader />\n        )}\n      </ul>\n\n    </div>\n  );\n});\n","/* eslint-disable no-console */\nimport { Comment } from '../types/Comment';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const deleteCommentFromServer = async (id: number) => {\n  await fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async (comment:Omit<Comment, 'id'>) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","/* eslint-disable max-len */\nexport const emailValidator = (email: string) => {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  return regex.test(email.toLowerCase());\n};\n","/* eslint-disable no-console */\nimport React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Comment } from '../../types/Comment';\n\nimport { addComment } from '../../api/comments';\n\nimport { emailValidator } from '../../functions/emailValidator';\n\nimport './NewCommentForm.scss';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  getComments: () => Promise<void>;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  getComments,\n  postId,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputComment, setInputComment] = useState('');\n  const [isEmailValid, setEmailValid] = useState(true);\n  const [isSubmited, setSubmitted] = useState(false);\n  const [isAddCommentLoading, setAddCommentLoading] = useState(false);\n\n  const handleSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setAddCommentLoading(true);\n      setSubmitted(true);\n\n      if (!inputName || !inputEmail || !inputComment) {\n        setAddCommentLoading(false);\n\n        return;\n      }\n\n      if (!emailValidator(inputEmail)) {\n        setEmailValid(false);\n        setAddCommentLoading(false);\n\n        return;\n      }\n\n      const newComment: Omit<Comment, 'id'> = {\n        postId,\n        name: inputName,\n        email: inputEmail,\n        body: inputComment,\n      };\n\n      await addComment(newComment);\n      await getComments();\n\n      setSubmitted(false);\n      setAddCommentLoading(false);\n      setInputName('');\n      setInputEmail('');\n      setInputComment('');\n    },\n    [inputName, inputEmail, inputComment, postId],\n  );\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={inputName}\n          onChange={({ target }) => {\n            setInputName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        {!isEmailValid && (\n          <p className=\"NewCommentForm__emailError\">\n            Email is invalid\n          </p>\n        )}\n\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className={classNames(\n            'NewCommentForm__input',\n            { 'NewCommentForm__input--invalid': !isEmailValid },\n          )}\n          value={inputEmail}\n          onChange={({ target }) => {\n            if (isSubmited) {\n              if (inputEmail !== target.value) {\n                setEmailValid(true);\n              }\n            }\n\n            setInputEmail(target.value);\n          }}\n          onBlur={({ target }) => {\n            if (isSubmited) {\n              setEmailValid(emailValidator(target.value));\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={inputComment}\n          onChange={({ target }) => {\n            setInputComment(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={isAddCommentLoading}\n      >\n        {isAddCommentLoading ? (<Loader />) : 'Add a comment'}\n      </button>\n    </form>\n  );\n});\n","import React, { useCallback, useState } from 'react';\nimport { deleteCommentFromServer } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: Post;\n  selectedPostComments: Comment[];\n  getComments: () => Promise<void>;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPost,\n  selectedPostComments,\n  getComments,\n}) => {\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n  const [isDeleteCommentLoading, setDeleteCommentLoading] = useState(false);\n  const [deleteTargets, setDeleteTargets] = useState<number[]>([]);\n\n  const deleteComment = useCallback(async (id: number) => {\n    setDeleteCommentLoading(true);\n    await deleteCommentFromServer(id);\n    await getComments();\n    setDeleteCommentLoading(false);\n    setDeleteTargets((prevState) => {\n      return prevState.filter(targetId => targetId !== id);\n    });\n  }, [getComments]);\n\n  return (\n    <div\n      className=\"PostDetails\"\n      data-cy=\"postDetails\"\n    >\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {selectedPost.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setCommentsVisible(!isCommentsVisible)}\n        >\n          {`${isCommentsVisible ? ('Hide') : ('Show')} ${selectedPostComments.length} comments`}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {isCommentsVisible && (\n            selectedPostComments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deleteComment(comment.id);\n                    setDeleteTargets((prevState) => {\n                      return ([\n                        ...prevState,\n                        comment.id,\n                      ]);\n                    });\n                  }}\n                  disabled={isDeleteCommentLoading\n                    && deleteTargets.includes(comment.id)}\n                >\n                  {isDeleteCommentLoading && deleteTargets.includes(comment.id)\n                    ? (<Loader />)\n                    : 'X'}\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))\n          )}\n\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPost.id}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { BASE_URL } from './api';\n\nexport const getUserByName = async (username: string) => {\n  const response = await fetch(`${BASE_URL}/users?name=${username}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text()}`);\n  }\n\n  return response.json();\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserByName } from './api/users';\nimport { getPostComments } from './api/comments';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { Loader } from './components/Loader';\nimport { getPostDetails } from './api/posts';\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectValue, setSelectValue] = useState('All users');\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [\n    selectedPostComments,\n    setSelectedPostComments,\n  ] = useState<Comment[]>([]);\n  const [isPostLoading, setPostLoading] = useState(false);\n\n  const getPostFromServerByID = useCallback(async () => {\n    try {\n      const commentsPromise = getPostComments(selectedPostId);\n      const currentPost = await getPostDetails(selectedPostId);\n      const currentPostComments = await commentsPromise;\n\n      setPostLoading(false);\n      setSelectedPost(currentPost);\n      setSelectedPostComments(currentPostComments);\n    } catch (error) {\n      setPostLoading(false);\n      setSelectedPost(null);\n      setSelectedPostComments([]);\n    }\n  }, [selectedPostId]);\n\n  const getCommentsFromServer = useCallback(async () => {\n    try {\n      const currentPostComments = await getPostComments(selectedPostId);\n\n      setSelectedPostComments(currentPostComments);\n    } catch (error) {\n      setSelectedPostComments([]);\n    }\n  }, [selectedPostId]);\n\n  const getUserByNameFromServer = useCallback(async (username: string) => {\n    try {\n      const userArr = await getUserByName(username);\n\n      setUser(userArr[0]);\n      setSelectedPostId(0);\n    } catch (error) {\n      setUser(null);\n    }\n  }, []);\n\n  const handleOpenPostDetails = useCallback((id: number) => {\n    if (selectedPostId === id) {\n      setPostLoading(false);\n      setSelectedPostId(0);\n      setSelectedPost(null);\n      setSelectedPostComments([]);\n\n      return;\n    }\n\n    setSelectedPost(null);\n    setSelectedPostComments([]);\n    setPostLoading(true);\n    setSelectedPostId(id);\n  }, [selectedPostId]);\n\n  const handeleSelectUser = useCallback((value: string) => {\n    setSelectValue(value);\n    setUser(null);\n\n    if (value === 'All users') {\n      return;\n    }\n\n    getUserByNameFromServer(value);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectValue}\n            onChange={({ target }) => handeleSelectUser(target.value)}\n          >\n            <option value=\"All users\">\n              All users\n            </option>\n\n            <option value=\"Leanne Graham\">\n              Leanne Graham\n            </option>\n\n            <option value=\"Ervin Howell\">\n              Ervin Howell\n            </option>\n\n            <option value=\"Clementine Bauch\">\n              Clementine Bauch\n            </option>\n\n            <option value=\"Patricia Lebsack\">\n              Patricia Lebsack\n            </option>\n\n            <option value=\"Chelsey Dietrich\">\n              Chelsey Dietrich\n            </option>\n\n            <option value=\"Mrs. Dennis Schulist\">\n              Mrs. Dennis Schulist\n            </option>\n\n            <option value=\"Kurtis Weissnat\">\n              Kurtis Weissnat\n            </option>\n\n            <option value=\"Nicholas Runolfsdottir V\">\n              Nicholas Runolfsdottir V\n            </option>\n\n            <option value=\"Glenna Reichert\">\n              Glenna Reichert\n            </option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            user={user}\n            selectedPostId={selectedPostId}\n            selectValue={selectValue}\n            handleOpenPostDetails={handleOpenPostDetails}\n            getPostFromServerByID={getPostFromServerByID}\n          />\n        </div>\n\n        {selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPost={selectedPost}\n              selectedPostComments={selectedPostComments}\n              getComments={getCommentsFromServer}\n            />\n          </div>\n        )}\n\n        {isPostLoading && (\n          <div className=\"App__content\">\n            <Loader />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}