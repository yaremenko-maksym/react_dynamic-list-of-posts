{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","functions/emailValidator.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","getUsersPosts","a","fetch","response","ok","Error","status","text","json","getUserPostsByID","userId","getPostDetails","postId","Loader","className","PostsList","React","memo","user","selectValue","selectedPostId","setSelectedPostId","setPostLoading","setSelectedPost","setSelectedPostComments","isPostListLoading","setPostListLoading","posts","setPosts","getPostsFromServer","useCallback","allPosts","getPostsFromServerByID","id","userPosts","useEffect","map","post","title","type","onClick","getPostComments","deleteCommentFromServer","method","addComment","comment","body","JSON","stringify","headers","emailValidator","email","test","toLowerCase","NewCommentForm","getComments","useState","inputName","setInputName","inputEmail","setInputEmail","inputComment","setInputComment","isEmailValid","setEmailValid","isSubmited","setSubmitted","handleSubmit","event","preventDefault","newComment","name","onSubmit","placeholder","value","onChange","target","classNames","onBlur","PostDetails","selectedPost","selectedPostComments","deleteComment","isCommentsVisible","setCommentsVisible","length","getUserByName","username","App","setUser","setSelectValue","isPostLoading","getPost","commentsPromise","currentPost","currentPostComments","getUserByNameFromServer","userArr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83e7fc69.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { Post } from '../types/Post';\nimport { BASE_URL } from './api';\n\nexport const getUsersPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const getUserPostsByID = async (userId: number): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text()}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getUserPostsByID, getUsersPosts } from '../../api/posts';\nimport { User } from '../../types/User';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  user: User | null;\n  selectValue: string;\n  selectedPostId: number;\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>;\n  setPostLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  setSelectedPostComments: React.Dispatch<React.SetStateAction<Comment[] | null>>;\n  isPostListLoading: boolean;\n  setPostListLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  posts: Post[] | null;\n  setPosts: React.Dispatch<React.SetStateAction<Post[] | null>>;\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  user,\n  selectValue,\n  selectedPostId,\n  setSelectedPostId,\n  setPostLoading,\n  setSelectedPost,\n  setSelectedPostComments,\n  isPostListLoading,\n  setPostListLoading,\n  posts,\n  setPosts,\n}) => {\n  const getPostsFromServer = useCallback(async () => {\n    try {\n      const allPosts = await getUsersPosts();\n\n      setPostListLoading(false);\n      setPosts(allPosts);\n    } catch (error) {\n      setPosts(null);\n    }\n  }, []);\n\n  const getPostsFromServerByID = useCallback(async () => {\n    try {\n      if (user !== null) {\n        const userPosts = await getUserPostsByID(user.id);\n\n        setPosts(userPosts);\n        setPostListLoading(false);\n      }\n    } catch (error) {\n      setPosts(null);\n      setPostListLoading(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    setPostListLoading(true);\n    if (selectValue === 'All users') {\n      getPostsFromServer();\n\n      return;\n    }\n\n    getPostsFromServerByID();\n  }, [user]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts && (\n          posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if (selectedPostId === post.id) {\n                    setPostLoading(false);\n                    setSelectedPostId(0);\n                    setSelectedPost(null);\n                    setSelectedPostComments(null);\n\n                    return;\n                  }\n\n                  setSelectedPost(null);\n                  setSelectedPostComments(null);\n                  setPostLoading(true);\n                  setSelectedPostId(post.id);\n                }}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          )))}\n\n        {isPostListLoading && (\n          <Loader />\n        )}\n      </ul>\n\n    </div>\n  );\n});\n","/* eslint-disable no-console */\nimport { Comment } from '../types/Comment';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text}`);\n  }\n\n  return response.json();\n};\n\nexport const deleteCommentFromServer = async (id: number) => {\n  await fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async (comment:Omit<Comment, 'id'>) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","/* eslint-disable max-len */\nexport const emailValidator = (email: string) => {\n  const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  return regex.test(email.toLowerCase());\n};\n","/* eslint-disable no-console */\nimport React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Comment } from '../../types/Comment';\n\nimport { addComment } from '../../api/comments';\n\nimport { emailValidator } from '../../functions/emailValidator';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  getComments: () => Promise<void>;\n  postId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  getComments,\n  postId,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputComment, setInputComment] = useState('');\n  const [isEmailValid, setEmailValid] = useState(true);\n  const [isSubmited, setSubmitted] = useState(false);\n\n  const handleSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setSubmitted(true);\n\n      if (!inputName || !inputEmail || !inputComment) {\n        return;\n      }\n\n      if (!emailValidator(inputEmail)) {\n        setEmailValid(false);\n\n        return;\n      }\n\n      const newComment: Omit<Comment, 'id'> = {\n        postId,\n        name: inputName,\n        email: inputEmail,\n        body: inputComment,\n      };\n\n      await addComment(newComment);\n      await getComments();\n\n      setSubmitted(false);\n      setInputName('');\n      setInputEmail('');\n      setInputComment('');\n    },\n    [inputName, inputEmail, inputComment, postId],\n  );\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => handleSubmit(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={inputName}\n          onChange={({ target }) => {\n            setInputName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        {!isEmailValid && (\n          <p className=\"NewCommentForm__emailError\">\n            Email is invalid\n          </p>\n        )}\n\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className={classNames(\n            'NewCommentForm__input',\n            { 'NewCommentForm__input--invalid': !isEmailValid },\n          )}\n          value={inputEmail}\n          onChange={({ target }) => {\n            if (isSubmited) {\n              if (inputEmail !== target.value) {\n                setEmailValid(true);\n              }\n            }\n\n            setInputEmail(target.value);\n          }}\n          onBlur={({ target }) => {\n            if (isSubmited) {\n              setEmailValid(emailValidator(target.value));\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={inputComment}\n          onChange={({ target }) => {\n            setInputComment(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPost: Post;\n  selectedPostComments: Comment[] | null;\n  deleteComment: (id: number) => Promise<void>;\n  getComments: () => Promise<void>;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPost,\n  selectedPostComments,\n  deleteComment,\n  getComments,\n}) => {\n  const [isCommentsVisible, setCommentsVisible] = useState(true);\n\n  return (\n    <div\n      className=\"PostDetails\"\n      data-cy=\"postDetails\"\n    >\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {selectedPost.body}\n        </p>\n      </section>\n\n      {selectedPostComments && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setCommentsVisible(!isCommentsVisible)}\n          >\n            {`${isCommentsVisible ? ('Hide') : ('Show')} ${selectedPostComments.length} comments`}\n          </button>\n\n          <ul className=\"PostDetails__list\">\n            {isCommentsVisible && (\n              selectedPostComments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n                </li>\n              ))\n            )}\n\n          </ul>\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPost.id}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { BASE_URL } from './api';\n\nexport const getUserByName = async (username: string) => {\n  const response = await fetch(`${BASE_URL}/users?name=${username}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}: ${response.text()}`);\n  }\n\n  return response.json();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserByName } from './api/users';\nimport { getPostDetails } from './api/posts';\nimport { getPostComments, deleteCommentFromServer } from './api/comments';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [selectValue, setSelectValue] = useState('All users');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [\n    selectedPostComments,\n    setSelectedPostComments,\n  ] = useState<Comment[] | null>(null);\n  const [isPostLoading, setPostLoading] = useState(false);\n  const [isPostListLoading, setPostListLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n\n  const getPost = useCallback(async () => {\n    try {\n      const commentsPromise = getPostComments(selectedPostId);\n      const currentPost = await getPostDetails(selectedPostId);\n      const currentPostComments = await commentsPromise;\n\n      setPostLoading(false);\n      setSelectedPost(currentPost);\n      setSelectedPostComments(currentPostComments);\n    } catch (error) {\n      setPostLoading(false);\n      setSelectedPost(null);\n      setSelectedPostComments(null);\n    }\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPost();\n  }, [selectedPostId]);\n\n  const getComments = useCallback(async () => {\n    try {\n      const currentPostComments = await getPostComments(selectedPostId);\n\n      setSelectedPostComments(currentPostComments);\n    } catch (error) {\n      setSelectedPostComments(null);\n    }\n  }, [selectedPostId]);\n\n  const deleteComment = useCallback(async (id: number) => {\n    await deleteCommentFromServer(id);\n    getComments();\n  }, [getComments]);\n\n  const getUserByNameFromServer = useCallback(async (username: string) => {\n    try {\n      const userArr = await getUserByName(username);\n\n      setUser(userArr[0]);\n      setSelectedPostId(0);\n    } catch (error) {\n      setUser(null);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectValue}\n            onChange={({ target }) => {\n              setPostListLoading(true);\n              setSelectValue(target.value);\n              setUser(null);\n              setPosts(null);\n\n              if (target.value === 'All users') {\n                setPostListLoading(false);\n\n                return;\n              }\n\n              getUserByNameFromServer(target.value);\n            }}\n          >\n            <option value=\"All users\">\n              All users\n            </option>\n\n            <option value=\"Leanne Graham\">\n              Leanne Graham\n            </option>\n\n            <option value=\"Ervin Howell\">\n              Ervin Howell\n            </option>\n\n            <option value=\"Clementine Bauch\">\n              Clementine Bauch\n            </option>\n\n            <option value=\"Patricia Lebsack\">\n              Patricia Lebsack\n            </option>\n\n            <option value=\"Chelsey Dietrich\">\n              Chelsey Dietrich\n            </option>\n\n            <option value=\"Mrs. Dennis Schulist\">\n              Mrs. Dennis Schulist\n            </option>\n\n            <option value=\"Kurtis Weissnat\">\n              Kurtis Weissnat\n            </option>\n\n            <option value=\"Nicholas Runolfsdottir V\">\n              Nicholas Runolfsdottir V\n            </option>\n\n            <option value=\"Glenna Reichert\">\n              Glenna Reichert\n            </option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            user={user}\n            selectValue={selectValue}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            setPostLoading={setPostLoading}\n            setSelectedPost={setSelectedPost}\n            setSelectedPostComments={setSelectedPostComments}\n            isPostListLoading={isPostListLoading}\n            setPostListLoading={setPostListLoading}\n            posts={posts}\n            setPosts={setPosts}\n          />\n        </div>\n\n        {selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPost={selectedPost}\n              selectedPostComments={selectedPostComments}\n              deleteComment={deleteComment}\n              getComments={getComments}\n            />\n          </div>\n        )}\n\n        {isPostLoading && (\n          <div className=\"App__content\">\n            <Loader />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}